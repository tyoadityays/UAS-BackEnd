##AWAL##
.env
DB_DATABASE=apptyo

--------------------------------------------------------------------------------------------------------------------------------------

##Controller,2 halaman,yield/extend##
1. Buat controller di cmd
php artisan make:controller NamaController -r
2. Use dan route di file web.php
   A. Tambahkan skrip untuk memakai controller dibagian atas
   use App\Http\Controllers\NamaController;
   B. Tambahkan skrip jika masuk ke link /tes akan diarahkan ke kontroler dan method yang dituju
   Route::get('/halaman1', [PekerjaanController::class, 'halaman1']);
   Route::get('/halaman2', [PekerjaanController::class, 'halaman2']);
3. Tambah method ke file controller sesuai dengan jumlah halaman yang diinginkan
    /**
     * Method untuk mengarahkan ke folder app file halaman1
     *
     * @return \Illuminate\Http\Response
     */
    public function halaman1()
    {
        //
        return view('app.halaman1');
    }

    /**
     * Method untuk mengarahkan ke folder app file halaman2
     *
     * @return \Illuminate\Http\Response
     */
    public function halaman2()
    {
        //
        return view('app.halaman2');
    }
4. Buat folder template dan buat file master dengan isi yang akan di require/exstend kemana" contoh head,side,dan footer saja lalu Tambahkan dibagian yang akan dimunculkan konten
@yield('namaterserah')
5. Buat file halaman1 dan halaman2 di folder app dan isinya hanya kontennya saja karena header,side,footer akan dipanggil dari file master dari folder template dengan menambah skrip berikut
@extends('template.master')
@section('namaterserah')
    disini isi konten dari halaman 1 atau 2 nya beda file
@endsection

--------------------------------------------------------------------------------------------------------------------------------------

##database##
1. buat model
php artisan make:model namamodel -m
2. app > model > namamodel > isi query
class namamodel extends Model
{
    use HasFactory;

    protected $table = 'namadatabaseyangingindibuat';
    protected $primaryKey = 'idatauterserah';

    protected $fillable = [
        'id','nik','nama','kelamin','alamat','status','pekerjaan','warga','asal','tanggal','golongan'
    ];
}
3. database > migrations > tanggal pembuatan model > isi query lebih detailnya
return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('namadatabase', function (Blueprint $table) {
            $table->increments('id');
            $table->bigInteger('nik/yang banyak angkanya tidak pakai jumlah gpp');
            $table->string('nama', 100);
            $table->enum('kelamin', ['Laki-laki', 'Perempuan']);
            $table->string('alamat', 200);
            $table->enum('status', ['Belum Kawin', 'Kawin']);
            $table->string('pekerjaan', 100);
            $table->enum('warga', ['WNI', 'WNA']);
            $table->string('asal', 100);
            $table->date('tanggal');
            $table->enum('golongan', ['A','AB','O','B']);
            $table->timestamps();
        });
    }
    
    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('namadatabase');
    }
};
4. mulai buat database dan isinya dengan query yang sudah diketikan di model & migration
php artisan migrate
5. untuk merubah isi datAbase tinggal rubah" yang di namamodel dan di tanggalnya lalu
php artisan migrate:refresh

--------------------------------------------------------------------------------------------------------------------------------------

edit 1 data didatabase menggunakan id 
web.php (tidak perlu ada file)
Route::get('/editdatapenduduk/{id}', [PendudukController::class, 'editdata'] );
Route::put('/proseseditpenduduk/{id}', [PendudukController::class, 'update']);

editpenduduk.blade (action beda/sama seperti hapus + ditambah value setiap form input apapun)
        <form id="quickForm" novalidate="novalidate" action="{{ url('proseseditpenduduk/'.$datapenduduk->id) }}" method="post">
        @csrf
        @method('PUT')
        <div class="card-body">
          <div class="form-group">
            <label for="exampleInputPassword1">NIK</label>
            <input type="text" class="form-control" id="nik" name="nik" placeholder="Masukkan NIK" value="{{ $datapenduduk->nik }}">
          </div>
          <div class="form-group">
            <label for="exampleInputFile">Jenis Kelamin</label>
            <select class="form-control" id="kelamin" name="kelamin">
              <option value="Laki-laki" @if($datapenduduk->kelamin=="Laki-laki") selected @endif >Laki-laki</option>
              <option value="Perempuan" @if($datapenduduk->kelamin=="Perempuan") selected @endif >Perempuan</option>
            </select>
          </div>

ListPenduduk (tombolnya)
<a href="{{ url('editdatapenduduk/'.Crypt::encryptString($alldata->id)) }}"> <button type="button" class="btn btn-sm btn-primary btn-lg">Edit</button></a>

controller (tambah use dan seperti dibawah kedalam 2 method)
    use Illuminate\Support\Facades\Crypt;

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function editdata($id)
    {
        //
        $datapenduduk = Penduduk::findOrFail(Crypt::decryptString($id));
        return view('app.EditPenduduk', compact('datapenduduk'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
        $penduduk = Penduduk::findOrFail($id);
        $penduduk->update([
            'id' => $request->id,
            'nik' => $request->nik,
            'nama' => $request->nama,
            'kelamin' => $request->kelamin,
            'alamat' => $request->alamat,
            'status' => $request->status,
            'pekerjaan' => $request->pekerjaan,
            'warga' => $request->warga,
            'asal' => $request->asal,
            'tanggal' => $request->tanggal,
            'golongan' => $request->golongan,
        ]);
        return redirect('/datapenduduk');
    }

--------------------------------------------------------------------------------------------------------------------------------------

##hapus
Controller destroy tambahin ini
    public function destroy($id)
    {
        //
        $penduduk = Penduduk::findOrFail($id);
        $penduduk->delete();
        return redirect('/datapenduduk');
    }

web.php tambah ini tanpa file 
Route::delete('hapusdatapenduduk/{id}', [PendudukController::class, 'destroy']);

list data php buat kolom tool dan isikan ini
                        <td> 
                          initomboleditdiatasnya<a href="{{ url('editagama/'.Crypt::encryptString($alldata->id)) }}"> <button type="button" class="btn btn-sm btn-primary btn-lg">Edit</button></a>
                          <form onsubmit="return confirm('Apakah Anda Yakin ?');"
                            action="{{ url('hapusdatapenduduk/'.$alldata->id) }}" method="POST">
                            @csrf
                            @method('DELETE')
                            <button type="submit" class="btn btn-sm btn-danger shadow">Delete</button>
                          </form>
                        </td>